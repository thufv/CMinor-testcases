predicate sorted(int[] arr, int low, int high) := 
  (forall sorted_a,sorted_b. ((low <= sorted_a && sorted_a <= sorted_b && sorted_b <= high) -> arr[sorted_a]<=arr[sorted_b]));

@pre  u + 1 > l && sorted(a_0,l,m) && sorted(a_0,m+1,u) && m >= l && m <= u && l >= 0 && |a_0| > 0 && u < |a_0|
@post sorted(rv,l,u) && |rv| = |a_0| && forall ax. (ax >= 0 && ax < l || ax > u && ax < |a_0| -> a_0[ax] = rv[ax])
int[] merge(int[] a_0, int l, int m, int u) {
       int[] buf := new int[u-l+1];
       int[] a := a_0;
       int i := l;
       int j := m + 1;
       for
               @ 0 <= k && k <= |buf| && (k = 0 || sorted(buf,0,k-1)) && sorted(a_0,l,m) &&
               sorted(a_0,m+1,u) && k <= u - l + 1 && |buf| = u - l + 1 && m >= l && l >= 0 &&
               m <= u && j > m && u < |a| && j <= |a_0| && i <= |a_0| && i >= l && j >= 0 && |a_0| = |a| && m < |a_0| &&
               forall bufx, a0x. (bufx >= 0 && bufx < k && a0x >= j && a0x <= u -> buf[bufx] <= a_0[a0x]) &&
               forall bufx, a0x. (bufx >= 0 && bufx < k && a0x >= i && a0x <= m -> buf[bufx] <= a_0[a0x]) &&
               (k = 0 || buf[k-1] = a_0[i-1] || buf[k-1] = a_0[j-1]) &&
               forall ax. (ax >= 0 && ax < |a_0| -> a_0[ax] = a[ax]) &&
               (k = 0 || buf[k-1] = a_0[i-1] && a_0[i-1] <= a_0[j] || buf[k-1] = a_0[j-1] && a_0[j-1] <= a_0[i]) &&
               (k = 0 || i > m && buf[k-1] <= a_0[j] || i <= m && j > u && buf[k-1] <= a_0[i] || i <= m && j <= u && (buf[k-1] <= a_0[i] || buf[k-1] <= a_0[j]))
               && (k = j - m - 1 + i - l)

               (int k := 0; k < u - l + 1; k := k + 1)
       {
               if (i > m) {
                       buf[k] := a_0[j];
                       j := j + 1;
               }
               else if (j > u) {
                       buf[k] := a_0[i];
                       i := i + 1;
               }
               else if (a_0[i] <= a_0[j]) {
                       buf[k] := a_0[i];
                       i := i + 1;
               }
               else {
                       buf[k] := a_0[j];
                       j := j + 1;
               }
       }
       for
               @ k >= 0 && k <= |buf| && sorted(buf,0,|buf|-1) && sorted(a,l,l + k - 1) && |buf| = u - l + 1 && l >=0 && u >= 0 && u - l + 1 > 0 && |a| = |a_0| && forall ax. (ax >= 0 && ax < l || ax > u && ax < |a_0| -> a_0[ax] = a[ax]) && (k > 0 && (a[l + k - 1] = buf[k - 1]) || k = 0)
               (int k := 0; k < u - l + 1; k := k + 1)
       {
               a[l + k] := buf[k];
       }

       return a;
}

@pre  l + u >= 0 && u < |a_0| && |a_0| >= 0 && l >= 0
@post sorted(rv,l,u) && |rv| = |a_0| && forall ax. (ax >= 0 && ax < l || ax > u && ax < |a_0| -> a_0[ax] = rv[ax])
int[] ms(int[] a_0, int l, int u) {
       int[] a := a_0;
       if (l >= u) {
               return a;
       }
       else {
               int m := (l + u) div 2;
               a := ms(a, l, m);
               a := ms(a, m + 1, u);
               a := merge(a, l, m, u);
               return a;
       }
}

@pre  |a| >= 1
@post sorted(rv, 0, |rv| - 1) && |rv| = |a|
int[] MergeSort(int[] a)
{
       return ms(a, 0, |a| - 1);
}