@pre  true
@post sorted(rv, 0, |rv| - 1)
int[] MergeSort(int[] a)
{
	return ms(a, 0, |a| - 1);
}

@pre  l >= 0 && |a_0| > u && u >= l - 1
@post sorted(rv, l, u) && |rv| = |a_0| && forall ix. (ix < l || ix > u -> rv[ix] = a_0[ix])
# (u - l + 1)
int[] ms(int[] a_0, int l, int u) {
	int[] a := a_0;
	if (l >= u) {
		return a;
	}
	else {
		int m := (l + u) div 2;
		a := ms(a, l, m);
		a := ms(a, m + 1, u);
		a := merge(a, l, m, u);
		return a;
	}
}

@pre  sorted(a_0, l, m) && sorted(a_0, m + 1, u) && l <= m + 1 && m <= u && |a_0|>u && l>=0 && m>=0 && l>=0
@post sorted(rv, l, u) && forall ix. (ix < l || ix > u -> rv[ix] = a_0[ix]) && |rv| = |a_0|
int[] merge(int[] a_0, int l, int m, int u) {
	int[] buf := new int[u-l+1];
	int[] a := a_0;
	int i := l;
	int j := m + 1;
	for 
		@ sorted(buf, 0, k - 1) &&
		  sorted(a_0, l, m) && sorted(a_0, m + 1, u) &&
		  (k > 0 -> ((i <= m -> buf[k - 1] <= a_0[i]) && (j <= u -> buf[k - 1] <= a_0[j]))) &&
		  j >= m + 1 && j <= u + 1 && i >= l && i <= m + 1 && (i - l) + (j - m - 1) = k &&
		  k >= 0 && k <= u - l + 1 &&
         |buf| = u-l+1 && |a|=|a_0| && |a_0| >u && j >= 0 && i>=0 && l>=0 &&
		  forall ix. (ix < l || ix > u -> a[ix] = a_0[ix])
		# (2, u - l + 1 - k)
		(int k := 0; k < u - l + 1; k := k + 1)
	{
		if (i > m) {
			@ j <= u;
			buf[k] := a_0[j];
			j := j + 1;
		}
		else if (j > u) {
			buf[k] := a_0[i];
			i := i + 1;
		}
		else if (a_0[i] <= a_0[j]) {
			buf[k] := a_0[i];
			i := i + 1;
		}
		else {
			buf[k] := a_0[j];
			j := j + 1;
		}
	}
	for 
		@ sorted(buf, 0, u - l) && sorted(a, l, l + k - 1) &&
		  k >= 0 && k <= u - l + 1 && (k > 0 && k <= u - l -> buf[k] >= a[l + k - 1]) &&
		  forall ix. (ix < l || ix > u -> a[ix] = a_0[ix]) && |a| = |a_0| &&
         l >= 0 && |buf| = u-l+1 && |a_0| > u
		# (1, u - l + 1 - k)
		(int k := 0; k < u - l + 1; k := k + 1)
	{
		a[l + k] := buf[k];
	}

	return a;
}
